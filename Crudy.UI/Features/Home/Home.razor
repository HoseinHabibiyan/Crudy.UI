@page "/"
@using System.Text.Json
@using System.Dynamic
@using System.Text.RegularExpressions
@inject HttpClient client
@inject IJSRuntime JS

<PageTitle>CRUDY</PageTitle>

<style>
    #response {
        border: 1px solid #ccc;
        width: 100%;
        height: 200px;
        color: black;
        padding:5px;
    }

    #request-body {
        height: 200px;
    }

    #lead {
        margin-top: 50x;
        margin-bottom: 50px;
        font-size: 25px;
        color: #5a5858;
    }

    #url-address-label {
        font-size: 20px;
        color: white;
    }

    .help{
        cursor: pointer;
        margin-top:50px;
        margin-bottom: 100px;
        img{
            width:650px
        }
    }

    #show-help-img-dialog .bit-dlg-hdr {
        display:none;
    }

</style>

<div class="container d-flex flex-column justify-content-center align-items-center">

    <div id="lead">
        Makes frontend testing easier by seamlessly mocking backend API.
    </div>

    <div class="card col-6 api-test ">
        <div class="card-body w-100">

            <div class="d-flex justify-content-around align-items-center">
                <div class="col-2">
                    <select class="form-control  text-center" @bind="httpMethod">
                        <option value="0">GET</option>
                        <option value="1">POST</option>
                        <option value="2">PUT</option>
                        <option value="3">DELETE</option>
                    </select>

                </div>
                <div class="col-8 mr-1 ml-1">
                    <div class="input-group">
                        <div class="input-group-prepend ">
                            <span class="input-group-text">https://crudy.ir/</span>
                        </div>
                        <input type="text" @bind-value="urlAddress" class="form-control" placeholder="[route]/">
                    </div>

                </div>

                <button @onclick="Get" class="btn btn-primary">Send</button>
            </div>
            <div class="mt-1">
                <BitPivot>
                    <BitPivotItem HeaderText="Request Body">
                        <div style="margin-top:10px">
                            <textarea placeholder="Body" id="request-body" @bind="body" class="form-control"></textarea>
                        </div>
                    </BitPivotItem>
                    <BitPivotItem HeaderText="Result">
                        <pre id="response">@jsonData</pre>
                    </BitPivotItem>
                </BitPivot>
            </div>
        </div>
    </div>


    <div class="mt-10 help">
        <img src="crudy.png" @onclick="@(()=> showHelp = true)" />
    </div>
</div>


<BitDialog @bind-IsOpen="showHelp" ShowCancelButton="false" ShowOkButton="false" Id="show-help-img-dialog" >
    <img src="crudy.png" width="800"/>
</BitDialog>



@code {
    string urlAddress = default!;
    int httpMethod = default!;
    string jsonData = default!;
    string body = default!;
    bool showHelp = false;

    public async Task Get()
    {
        if (urlAddress is null)
        {
            return;
        }

        var method = GetMethod(httpMethod);
        var request = new HttpRequestMessage(method, urlAddress);

        if (method == HttpMethod.Post || method == HttpMethod.Put)
            request.Content = new StringContent(body);


        var response = await client.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            jsonData = ((int)response.StatusCode).ToString() + " " + Regex.Replace(response.StatusCode.ToString(), "(?<=[a-z])([A-Z])", " $1", RegexOptions.Compiled);
            return;
        }

        var content = await response.Content.ReadFromJsonAsync<ExpandoObject>();

        jsonData = JsonSerializer.Serialize(content, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
    }

    private HttpMethod GetMethod(int index) => index switch
    {
        0 => HttpMethod.Get,
        1 => HttpMethod.Post,
        2 => HttpMethod.Put,
        3 => HttpMethod.Delete,
        _ => throw new NotImplementedException("Http method value is incorrect")
    };
}