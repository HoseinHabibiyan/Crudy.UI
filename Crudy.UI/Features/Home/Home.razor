@page "/"
@using System.Text.Json
@using System.Dynamic
@using System.Text.RegularExpressions
@inject HttpClient client

<div class="wrapper col-12 d-flex flex-column justify-content-center align-items-center">

    <div id="lead">
        Makes frontend testing easier by seamlessly mocking backend API.
    </div>

    @* ------------rest client------------ *@
    <div class="container-rest-client w-100  d-flex flex-column justify-content-center align-items-center">

        <img src="crudy.png" />

        <div class="card col-6 api-test mt-3">
            <div class="card-body w-100">

                <div class="d-flex justify-content-around align-items-center">
                    <div class="col-2">
                        <select class="form-control  text-center" @bind="httpMethod">
                            <option value="0">GET</option>
                            <option value="1">POST</option>
                            <option value="2">PUT</option>
                            <option value="3">DELETE</option>
                        </select>

                    </div>
                    <div class="col-8 mr-1 ml-1">
                        <div class="input-group">
                            <div class="input-group-prepend ">
                                <span class="input-group-text">https://crudy.ir/</span>
                            </div>
                            <input type="text" @bind-value="urlAddress" class="form-control" placeholder="[route]/">
                        </div>

                    </div>

                    <button @onclick="Get" class="btn btn-primary">Send</button>
                </div>
                <div class="mt-1">
                    <BitPivot>
                        <BitPivotItem HeaderText="Request Body" IsSelected="pivotItem" IsSelectedChanged="@(item => Console.Write(item.ToString()))">
                            <div style="margin-top:10px">
                                <textarea placeholder="Body" id="request-body" @bind="body" class="form-control"></textarea>
                            </div>
                        </BitPivotItem>
                        <BitPivotItem HeaderText="Result" IsSelected="!pivotItem" IsSelectedChanged="@(item => pivotItem = !pivotItem)">
                            <pre id="response">@jsonData</pre>
                        </BitPivotItem>
                    </BitPivot>
                </div>
            </div>
        </div>
    </div>
    @* ------------rest client------------ *@

    <div class="card mt-5">
        <div class="card-body d-flex flex-column justify-content-center align-content-center">
            <div class="d-flex justify-content-center align-content-center">
                <BitIcon IconName="@BitIconName.Timer" Style="padding:0" />
                <span class="p-2"> Data expires after 24 hours</span>
            </div>
            <div>
                <BitButton Style="background-color:#2374ab; color:white; border-color:#2374ab" Size="BitButtonSize.Large" ButtonStyle="BitButtonStyle.Standard">
                    Sign up to keep your data permanent
                </BitButton>
            </div>
        </div>
    </div>

    <div class="mt-5 fs-1">what you can do</div>

    <div class="col-6 mt-3">
        <table class="table">
            <thead>
            <tr>
                <th scope="col">Action</th>
                <th scope="col">HTTP Method</th>
                <th scope="col">Payload</th>
                <th scope="col">URL</th>
                <th scope="col">Description</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>Create</td>
                <td>POST</td>
                <td>JSON</td>
                <td>/[route]</td>
                <td>Create entity</td>
            </tr>
            <tr>
                <td>Read</td>
                <td>GET</td>
                <td>-</td>
                <td>/[route]/[page-index]/[page-size]</td>
                <td>Read entity by pagination</td>
            </tr>
            <tr>
                <td>Read</td>
                <td>GET</td>
                <td>-</td>
                <td>/[route]/[id]</td>
                <td>Read entity by id</td>
            </tr>
            <tr>
                <td>Update</td>
                <td>PUT</td>
                <td>JSON</td>
                <td>/[route]/[id]</td>
                <td>Update entity</td>
            </tr>
            <tr>
                <td>Delete</td>
                <td>DELETE</td>
                <td>-</td>
                <td>/[route]/[id]</td>
                <td>Delete entity by id</td>
            </tr>
            </tbody>
        </table>
    </div>

    <div class="col-12 d-flex flex-column justify-content-center align-items-center mt-10 curl-request-cheat-sheet">
        <span>Example</span>
        <img src="curl-request.png"  class="img-fluid mt-2"  @onclick="@(()=> showHelp = true)" />
    </div>

</div>






<BitDialog @bind-IsOpen="showHelp" ShowCancelButton="false" ShowOkButton="false" Id="show-help-img-dialog">
    <img src="curl-request.png"  class="img-fluid" width="800" />
</BitDialog>



@code {
    string urlAddress = default!;
    int httpMethod = default!;
    string jsonData = default!;
    string body = default!;
    bool showHelp = false;
    bool pivotItem = true;

    public async Task Get()
    {
        if (urlAddress is null)
        {
            return;
        }

        var method = GetMethod(httpMethod);
        var request = new HttpRequestMessage(method, urlAddress);

        if (method == HttpMethod.Post || method == HttpMethod.Put)
            request.Content = new StringContent(body);


        var response = await client.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            jsonData = ((int)response.StatusCode).ToString() + " " + Regex.Replace(response.StatusCode.ToString(), "(?<=[a-z])([A-Z])", " $1", RegexOptions.Compiled);
            return;
        }

        var content = await response.Content.ReadFromJsonAsync<ExpandoObject>();

        jsonData = JsonSerializer.Serialize(content, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
    }

    private HttpMethod GetMethod(int index) => index switch
    {
        0 => HttpMethod.Get,
        1 => HttpMethod.Post,
        2 => HttpMethod.Put,
        3 => HttpMethod.Delete,
        _ => throw new NotImplementedException("Http method value is incorrect")
    };

    // private void httpMethodChange()
    // {
    //     if (httpMethod is 1 or 2)
    //         isShowRestClientBodyTab = true;
    //     isShowRestClientResultTab = false;
    // }

    private void restClientTabs(EventArgs e)
    {
        Console.WriteLine(e.ToString());
    }
}