@page "/"
@using System.Text.Json
@using System.Dynamic
@using System.Text.RegularExpressions
@inject HttpClient client
@inject IJSRuntime JS

<PageTitle>CRUDY</PageTitle>

<style>
    #response {
        border: 1px solid #ccc;
        padding: 10px;
        width: 100%;
        height: 600px;
        color: black
    }

    #request-body {
        height: 400px;
    }

    #lead{
        margin-top:100px;
        font-size:25px;
        /* color: #5a5858; */
        color: white;
    }

</style>


<div id="lead" class="d-flex flex-column justify-content-center align-items-center">
    <span> Makes frontend testing easier by seamlessly mocking backend API.</span>

    <img src="crudy-api.png" width="900" class="mt-10" />
</div>




<div class="api-test d-flex justify-content-around align-items-start mt-10">
    <div class="col-6">
        <div class="d-flex justify-content-around">
            <div class="col-2">
                <MudSelect T="int" Label="Http Method" Variant="Variant.Outlined" AdornmentColor="Color.Primary" AnchorOrigin="Origin.BottomCenter" @bind-Value="httpMethod">
                    <MudSelectItem Value="0">GET</MudSelectItem>
                    <MudSelectItem Value="1">POST</MudSelectItem>
                    <MudSelectItem Value="2">PUT</MudSelectItem>
                    <MudSelectItem Value="3">DELETE</MudSelectItem>
                </MudSelect>
            </div>
            <div class="col-8">
                <MudTextField @bind-Value="urlAddress" AdornmentColor="Color.Dark" Label="Url" Variant="Variant.Outlined"></MudTextField>
            </div>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" StartIcon="@Icons.Material.Filled.Send" Class="mt-1 pl-10 pr-10" @onclick="Get" Color="Color.Primary">Send</MudButton>
        </div>
        @if (httpMethod is 1 or 2)
        {
            <div class="mt-5">
                <textarea placeholder="Body" id="request-body" @bind="body" class="form-control"></textarea>
            </div>
        }
    </div>

    <div class="col-5 d-flex justify-content-center">
        <pre id="response">@jsonData</pre>
    </div>
</div>




@code {
    string urlAddress = default!;
    int httpMethod = default!;
    string jsonData = default!;
    string body = default!;

    public async Task Get()
    {
        if (urlAddress is null)
        {
            return;
        }

        var method = GetMethod(httpMethod);
        var request = new HttpRequestMessage(method, urlAddress);

        if (method == HttpMethod.Post || method == HttpMethod.Put)
            request.Content = new StringContent(body);


        var response = await client.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            jsonData = ((int)response.StatusCode).ToString() + " " + Regex.Replace(response.StatusCode.ToString(), "(?<=[a-z])([A-Z])", " $1", RegexOptions.Compiled);
            return;
        }

        var content = await response.Content.ReadFromJsonAsync<ExpandoObject>();

        jsonData = JsonSerializer.Serialize(content, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
    }

    private HttpMethod GetMethod(int index) => index switch
    {
        0 => HttpMethod.Get,
        1 => HttpMethod.Post,
        2 => HttpMethod.Put,
        3 => HttpMethod.Delete,
        _ => throw new NotImplementedException("Http method value is incorrect")
    };
}